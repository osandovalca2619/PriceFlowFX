import { Repository } from 'typeorm';
import { PriceWebSocketGateway, FXPriceUpdate } from './websocket.gateway';
import { Currency } from '../currencies/entities/currency.entity';
export declare class PriceService {
    private currencyRepository;
    private webSocketGateway;
    private readonly logger;
    private currentPrices;
    private priceHistory;
    private availableCurrencies;
    private availablePairs;
    private isWebSocketReady;
    constructor(currencyRepository: Repository<Currency>, webSocketGateway: PriceWebSocketGateway);
    private initializeService;
    loadAvailableCurrencies(): Promise<void>;
    private generateCurrencyPairs;
    private initializeFallbackPairs;
    validateCurrencyPair(currencyPair: string): Promise<boolean>;
    handlePriceUpdates(): void;
    logSystemStatus(): void;
    getCurrentPrice(currencyPair: string): FXPriceUpdate | null;
    getAllCurrentPrices(): FXPriceUpdate[];
    getPriceHistory(currencyPair: string, limit?: number): FXPriceUpdate[];
    getAvailablePairs(): string[];
    getAvailableCurrencies(): Currency[];
    isMarketOpen(): boolean;
    getMarketStatus(): {
        isOpen: boolean;
        timezone: string;
        currentTime: Date;
        nextOpen: Date | null;
        nextClose: Date | null;
    };
    syncWithExternalProvider(provider: 'bloomberg' | 'reuters' | 'datatec'): Promise<void>;
    private initializeBasePrices;
    private generatePriceUpdate;
    private createPriceUpdate;
    private addToHistory;
    private getNextMarketOpen;
    private getNextMarketClose;
}
